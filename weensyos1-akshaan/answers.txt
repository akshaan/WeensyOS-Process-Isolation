Name: Akshaan Kakar
UCLA ID: 804029538


-------------------------------------------------------------------------------

Response to Exercise 1:

Replacing the call to run(current) with schedule() in the INT_SYS_GETPID clause will not cause a wrong return value from the sys_getpid() system call as long as the user processes do not overwrite the kernel stack. This is because the after the call to sys_getpid() issues the trap, the kernel stores the current states of all registers so that when we return to the current process, it can resume execution from where it left off. Therefore, after the call to schedule runs all the other runnable processes, the value of the %eax register which was stored on the kernel stack will still be the pid of the original process that called sys_getpid().


Response to Excercise 3:

Instead of adding a field to the process descriptor, I made use of the P_BLOCKED option for the p_state field of the descriptor. Instead of having the INT_SYS_WAIT clause return WAIT_TRYAGAIN, I changed the code so that the p_state field of the calling process is changed to P_BLOCKED. In the INT_SYS_EXIT clause of the interrupt() function, I added a for loop that iterates through the proc_array[] and finds every process whose p_state field is P_BLOCKED and changes it to P_RUNNABLE.


Response to Exercise 4: 

The bug that exists is that processes that have exited are not being converted back to empty processes.


Anything else you'd like us to know:



Extra credit exercises:


Response to Excercise 5:

A piece of code that will print 10 on a system with correct process isolation but 11 on MinprocOS is :


void
start(void)
{
        int x = 0;
        /* YOUR CODE HERE */
        int *volatile y = &x;
        pid_t p = sys_fork();
        /* YOUR CODE HERE */
        if(p == 0){
        *y = 1;
        x = 1;
        }
        else if (p > 0)
                sys_wait(p);
        app_printf("%d",x);
        sys_exit(0);
}


This is because, since the stack for the parent is copied directly to the child, a pointer reference to an integer will copy the same address from parent to child. Therefore when the child process is run, we assign the childs local variable x with the value 1 and also the variable that y points to, which is the variable x on the parent's stack. Thus both processes print 1. The pointer y points to a volatile int so that the compiler does not optimize the assignment of the actual integer. On an OS with correct process isolation, the pointer passed to the child processes stack would point to the child's own copy of the local variable x and not the parent copy on the parent's stack.


Response to Exercise 6:

I implemented the sys_newthread system call. To do this, I defined a new function called pid_t sys_newthread(void(*start_function)(void)) in the file mpos-app.h. After this, I defined a new interrupt code calles INT_SYS_NEWTHREAD in the file mpos.h. Following this, I added a clause for the handling of this interrupt in the interrupt() function in the file mpos-kern.c. I also defined a helper function called do_thread(process_t *parent) which is called by the interrupt() fnction in the INT_SYS_NEWTHREAD clause.


Response to Exercise 7:

I implemented the sys_kill system call. To do this, I followed a similar procedure as in the case of the sys_newthread system call. I created a clause for this interrupt case in the interrupt() function. That clause was responsible for converting the process to be killed into an empty process and then continuing to run the current process. I modified the program in mpos-app2.c to kill all odd numbered processes. The modification to the mpos-app2 is in the run_child() function and is in comments. The modification causes all odd processes to be killed except for the process with pid = 3. I was unable to remove this error in the modified program.
